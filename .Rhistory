pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
pmse(fpls_preds_A_basis,y_test)
pmse(fpls_preds_B_basis,y_test)
# Degree = 3 for cubic B-splines
d_x <- 3
# M =  number of basis functions - minus degree
M_x <- 25
# Internal knots for basis functions
knots_x <- seq(0, 1, length.out = M_x+1)[-c(1,M_x+1)]
x_basis_mat <- bSpline(grdA, knots = knots_x, degree = d_x, intercept = T)
fplsr_fit_basis <- fplsr(y_train, X_A_train, basis_mat, x_basis_mat, ncomp = k)
# Predictions
fpls_preds_A_basis <- pred_fplsr(X_A_test,fplsr_fit_basis)
fpls_preds_B_basis <- pred_fplsr(X_B_test,fplsr_fit_basis)
pmse(pls_preds_A,y_test)
pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
pmse(fpls_preds_A_basis,y_test)
pmse(fpls_preds_B_basis,y_test)
grdA
plot(fpls_preds_A_basis,y_test)
plot(fpls_preds_A,y_test)
plot(fpls_preds_B,y_test)
plot(fpls_preds_B_basis,y_test)
# Read in data #
x_data <- read_csv("data/AOP_Crown.csv")
site_trait_data <- read_csv("data/site_trait_data.csv")
y_data <- drop_na(tibble(ID = site_trait_data$SampleSiteID, y = site_trait_data$d15N))
data <- inner_join(y_data,x_data)
y <- tb1$y
refl_data <- data[,20:445]
bad_bands <- c(1:8,192:205,284:327,417:ncol(refl_data))
X <- matrix(unname(unlist(refl_data[,-bad_bands])), nrow = nrow(refl_data))
n <- nrow(X)
pA <- ncol(X)
grdA <- seq(0,1,length.out = pA)
pB <- 200
grdB <- seq(0,1,length.out = pB)
source('functions.R')
# Read in data
x_data <- read_csv("data/AOP_Crown.csv")
site_trait_data <- read_csv("data/site_trait_data.csv")
y_data <- drop_na(tibble(ID = site_trait_data$SampleSiteID, y = site_trait_data$d15N))
xy_data <- inner_join(y_data,x_data)
refl_data <- xy_data[,20:445]
bad_bands <- c(1:8,192:205,284:327,417:ncol(refl_data))
# Reflecatance data
X <- matrix(unname(unlist(refl_data[,-bad_bands])), nrow = nrow(refl_data))
# Response
y <- xy_data$y
# Number of observations
n <- nrow(X)
# Original observation grid (scaled to unit interval)
pA <- ncol(X)
grdA <- seq(0,1,length.out = pA)
# Misaligned observtion grid
pB <- 200
grdB <- seq(0,1,length.out = pB)
# Degree for cubic B-splines
d <- 3
# Number of internal knots - 1
M <- 50
# Internal knots for basis functions
knots <- seq(0, 1, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on original observation grid
basis_spectra <- bSpline(grdA, knots = knots, degree = d, intercept = T)
# Coefficients from basis expansion
A <- get_basis_coefs(X,basis_spectra)
# Spectral points matching original observation grid (instrument A)
X_A <- (A%*%t(predict(basis_spectra,grdA)))
# Spectral points on mislaigned grid (instrument B)
X_B <- (A%*%t(predict(basis_spectra,grdB)))
# Train/Test Split
set.seed(10)
train_ind <- sample(1:n,floor(.8*n))
X_A_train <- X_A[train_ind,]
X_B_train <- X_B[train_ind,]
X_A_test <- X_A[-train_ind,]
X_B_test <- X_B[-train_ind,]
y_train <- y[train_ind]
y_test <- y[-train_ind]
plsr_fit <- plsr(y_train~X_A_train, validation = "CV")
# Choose number of componenets which minimize CV PRESS
k <- which.min(plsr_fit$validation$PRESS)
# Coefficients from plsr model
alpha <- (plsr_fit$coefficients[,,k])
# Coefficients closest to observavtion grid of spectra from instrument B
alpha_adj <- alpha[find_closest(grdA,grdB)]
# Predictions
pls_preds_A <- as.numeric(X_A_test%*%alpha)
pls_preds_B <- as.numeric(X_B_test%*%alpha_adj)
# Degree = 3 for cubic B-splines
d <- 3
# M = number of basis functions - degree
# Should be chosen via cross-validation (or some criterion)
M <- 30
# Internal knots for basis functions
knots <- seq(0, 1, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on observation grid
basis_mat <- bSpline(grdA, knots = knots, degree = d, intercept = T)
fplsr_fit <- fplsr(y_train, X_A_train, basis_mat, ncomp = k)
# Predictions
fpls_preds_A <- pred_fplsr(X_A_test,fplsr_fit)
fpls_preds_B <- pred_fplsr(X_B_test,fplsr_fit)
# Degree = 3 for cubic B-splines
d_x <- 3
# M =  number of basis functions - minus degree
M_x <- 25
# Internal knots for basis functions
knots_x <- seq(0, 1, length.out = M_x+1)[-c(1,M_x+1)]
x_basis_mat <- bSpline(grdA, knots = knots_x, degree = d_x, intercept = T)
fplsr_fit_basis <- fplsr(y_train, X_A_train, basis_mat, x_basis_mat, ncomp = k)
# Predictions
fpls_preds_A_basis <- pred_fplsr(X_A_test,fplsr_fit_basis)
fpls_preds_B_basis <- pred_fplsr(X_B_test,fplsr_fit_basis)
##### Results #####
pmse(pls_preds_A,y_test)
pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
pmse(fpls_preds_A_basis,y_test)
pmse(fpls_preds_B_basis,y_test)
# Read in data #
data <- read_csv("/Desktop/LUCAS_ref.csv")
# Read in data #
data <- read_csv("/home/roryjake/Desktop/LUCAS_ref.csv")
y <- data$pH_h2o
X <- as.matrix(data[,1:425])
id <- 1:nrow(X)
# Set up 0,1 grid and grid for misaligned observations
p <- ncol(X)
n <- nrow(X)
grd <- seq(0,1,length.out = p)
source('functions.R')
data <- read_csv("/home/roryjake/Desktop/LUCAS_ref.csv")
y <- data$pH_h2o
X <- as.matrix(data[,1:425])
id <- 1:nrow(X)
# Number of observations
n <- nrow(X)
# Original observation grid (scaled to unit interval)
pA <- ncol(X)
grdA <- seq(0,1,length.out = pA)
# Misaligned observtion grid
pB <- 200
grdB <- seq(0,1,length.out = pB)
# Degree for cubic B-splines
d <- 3
# Number of internal knots - 1
M <- 50
# Internal knots for basis functions
knots <- seq(0, 1, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on original observation grid
basis_spectra <- bSpline(grdA, knots = knots, degree = d, intercept = T)
# Coefficients from basis expansion
A <- get_basis_coefs(X,basis_spectra)
# Spectral points matching original observation grid (instrument A)
X_A <- (A%*%t(predict(basis_spectra,grdA)))
# Spectral points on mislaigned grid (instrument B)
X_B <- (A%*%t(predict(basis_spectra,grdB)))
# Train/Test Split
set.seed(10)
train_ind <- sample(1:n,floor(.8*n))
X_A_train <- X_A[train_ind,]
X_B_train <- X_B[train_ind,]
X_A_test <- X_A[-train_ind,]
X_B_test <- X_B[-train_ind,]
y_train <- y[train_ind]
y_test <- y[-train_ind]
plsr_fit <- plsr(y_train~X_A_train, validation = "CV")
X <- as.matrix(data[,1:425])
# Choose number of componenets which minimize CV PRESS
k <- which.min(plsr_fit$validation$PRESS)
# Coefficients from plsr model
alpha <- (plsr_fit$coefficients[,,k])
# Coefficients closest to observavtion grid of spectra from instrument B
alpha_adj <- alpha[find_closest(grdA,grdB)]
# Predictions
pls_preds_A <- as.numeric(X_A_test%*%alpha)
pls_preds_B <- as.numeric(X_B_test%*%alpha_adj)
# Degree = 3 for cubic B-splines
d <- 3
# M = number of basis functions - degree
# Should be chosen via cross-validation (or some criterion)
M <- 30
# Internal knots for basis functions
knots <- seq(0, 1, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on observation grid
basis_mat <- bSpline(grdA, knots = knots, degree = d, intercept = T)
fplsr_fit <- fplsr(y_train, X_A_train, basis_mat, ncomp = k)
# Predictions
fpls_preds_A <- pred_fplsr(X_A_test,fplsr_fit)
fpls_preds_B <- pred_fplsr(X_B_test,fplsr_fit)
fplsr_fit <- fplsr(y_train, X_A_train, basis_mat, ncomp = k)
pmse(pls_preds_B,y_test)
##### Results #####
pmse(pls_preds_A,y_test)
##### Partial Least Squares Regression #####
k <- 10
plsr_fit <- plsr(y_train~X_A_train, ncomp = k)
# Coefficients from plsr model
alpha <- (plsr_fit$coefficients[,,k])
# Coefficients closest to observavtion grid of spectra from instrument B
alpha_adj <- alpha[find_closest(grdA,grdB)]
# Predictions
pls_preds_A <- as.numeric(X_A_test%*%alpha)
pls_preds_B <- as.numeric(X_B_test%*%alpha_adj)
# Degree = 3 for cubic B-splines
d <- 3
# M = number of basis functions - degree
# Should be chosen via cross-validation (or some criterion)
M <- 30
# Internal knots for basis functions
knots <- seq(0, 1, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on observation grid
basis_mat <- bSpline(grdA, knots = knots, degree = d, intercept = T)
fplsr_fit <- fplsr(y_train, X_A_train, basis_mat, ncomp = k)
# Predictions
fpls_preds_A <- pred_fplsr(X_A_test,fplsr_fit)
fpls_preds_B <- pred_fplsr(X_B_test,fplsr_fit)
# Degree = 3 for cubic B-splines
d_x <- 3
# M =  number of basis functions - minus degree
M_x <- 25
# Internal knots for basis functions
knots_x <- seq(0, 1, length.out = M_x+1)[-c(1,M_x+1)]
x_basis_mat <- bSpline(grdA, knots = knots_x, degree = d_x, intercept = T)
fplsr_fit_basis <- fplsr(y_train, X_A_train, basis_mat, x_basis_mat, ncomp = k)
# Predictions
fpls_preds_A_basis <- pred_fplsr(X_A_test,fplsr_fit_basis)
fpls_preds_B_basis <- pred_fplsr(X_B_test,fplsr_fit_basis)
##### Results #####
pmse(pls_preds_A,y_test)
pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
pmse(fpls_preds_A_basis,y_test)
pmse(fpls_preds_B_basis,y_test)
plot(pls_preds_A,y_test)
plot(pls_preds_B,y_test)
plot(fpls_preds_A,y_test)
plot(fpls_preds_B,y_test)
plot(fpls_preds_A_basis,y_test)
plot(fpls_preds_B_basis,y_test)
plot(fpls_preds_A_basis,y_test)
plot(fpls_preds_B_basis,y_test)
y_test
##### Results #####
pmse(pls_preds_A,y_test)
pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
pmse(fpls_preds_A_basis,y_test)
pmse(fpls_preds_B_basis,y_test)
# M = number of basis functions - degree
# Should be chosen via cross-validation (or some criterion)
M <- 25
# Internal knots for basis functions
knots <- seq(0, 1, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on observation grid
basis_mat <- bSpline(grdA, knots = knots, degree = d, intercept = T)
fplsr_fit <- fplsr(y_train, X_A_train, basis_mat, ncomp = k)
# Predictions
fpls_preds_A <- pred_fplsr(X_A_test,fplsr_fit)
fpls_preds_B <- pred_fplsr(X_B_test,fplsr_fit)
# Degree = 3 for cubic B-splines
d_x <- 3
# M =  number of basis functions - minus degree
M_x <- 25
# Internal knots for basis functions
knots_x <- seq(0, 1, length.out = M_x+1)[-c(1,M_x+1)]
x_basis_mat <- bSpline(grdA, knots = knots_x, degree = d_x, intercept = T)
fplsr_fit_basis <- fplsr(y_train, X_A_train, basis_mat, x_basis_mat, ncomp = k)
# Predictions
fpls_preds_A_basis <- pred_fplsr(X_A_test,fplsr_fit_basis)
fpls_preds_B_basis <- pred_fplsr(X_B_test,fplsr_fit_basis)
##### Results #####
pmse(pls_preds_A,y_test)
pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
##### Results #####
pmse(pls_preds_A,y_test)
pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
pmse(fpls_preds_A_basis,y_test)
pmse(fpls_preds_B_basis,y_test)
##### Results #####
pmse(pls_preds_A,y_test)
pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
pmse(fpls_preds_A_basis,y_test)
pmse(fpls_preds_B_basis,y_test)
source('functions.R')
# true functional coefficient
beta <- function(t){10*(t-1)^2 + 30*cos(4*pi*t^3)}
# domain for observations
domain <- c(0,1)
a <- domain[1]
b <- domain[2]
# number of measured spectral points for instrument A and B respectively
p1 <- 425
p2 <- 150
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
plsr_fit <- plsr(Y_train ~ X_A_train, validation = "CV")
# Choose number of componenets which minimize CV PRESS
k <- which.min(plsr_fit$validation$PRESS)
# Coefficients from plsr model
alpha <- (plsr_fit$coefficients[,,k])
# Coefficients closest to observavtion grid of spectra from instrument B
alpha_adj <- alpha[find_closest(grd_A,grd_B)]
# Predictions
pls_preds_A <- as.numeric(X_A_test%*%alpha)
pls_preds_B <- as.numeric(X_B_test%*%alpha_adj)
# Degree = 3 for cubic B-splines
d <- 3
# M = number of basis functions - degree
# Should be chosen via cross-validation (or some criterion)
M <- 10
# Internal knots for basis functions
knots <- seq(a, b, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on observation grid
basis_mat <- bSpline(grd_A, knots = knots, degree = d, intercept = T)
# Number of components for fPLSR
# Should be chosen via cross-validation (or some criterion)
k <- 5
fplsr_fit <- fplsr(Y_train, X_A_train, basis_mat, ncomp = k)
# Predictions
fpls_preds_A <- pred_fplsr(X_A_test,fplsr_fit)
fpls_preds_B <- pred_fplsr(X_B_test,fplsr_fit)
# Degree = 3 for cubic B-splines
d_x <- 3
# M =  number of basis functions - minus degree
M_x <- 13
# Internal knots for basis functions
knots_x <- seq(a, b, length.out = M_x+1)[-c(1,M_x+1)]
x_basis_mat <- bSpline(grd_A, knots = knots_x, degree = d_x, intercept = T)
k <- 5
fplsr_fit_basis <- fplsr(Y_train, X_A_train, basis_mat, x_basis_mat, ncomp = k)
# Predictions
fpls_preds_A_basis <- pred_fplsr(X_A_test,fplsr_fit_basis)
fpls_preds_B_basis <- pred_fplsr(X_B_test,fplsr_fit_basis)
pmse(pls_preds_A,Y_test)
pmse(pls_preds_B,Y_test)
pmse(fpls_preds_A,Y_test)
pmse(fpls_preds_B,Y_test)
pmse(fpls_preds_A_basis,Y_test)
pmse(fpls_preds_B_basis,Y_test)
plot(fpls_preds_A_basis,Y_test)
plot(fpls_preds_B_basis,Y_test)
plot(fpls_preds_A_basis,Y_test)
plot(fpls_preds_B_basis,Y_test)
pmse(fpls_preds_B_basis,Y_test)
pmse(fpls_preds_A_basis,Y_test)
pmse(fpls_preds_B_basis,Y_test)
X_B_test %>% dim()
X_A_test %>% dim()
fplsr_fit$beta_fun(grdA)
fplsr_fit$beta_fun(grd_A)
fplsr_fit$beta_fun(grd_A) %>% plot.ts()
beta(grd_A)
beta(grd_A) %>% plot.ts()
fplsr_fit$beta_fun(grd_A) %>% plot.ts()
beta(grd_A) %>% plot.ts()
fplsr_fit$beta_fun(grd_A) %>% plot.ts()
beta(grd_A) %>% plot.ts()
library(tidyverse)
library(splines2)
library(pls)
source('functions.R')
# true functional coefficient
beta <- function(t){10*(t-1)^2 + 30*cos(4*pi*t^3)}
# domain for observations
domain <- c(0,1)
a <- domain[1]
b <- domain[2]
# number of measured spectral points for instrument A and B respectively
p1 <- 425
p2 <- 150
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
X_A_train[1,] %>% plot.ts()
X_B_train[1,] %>% plot.ts()
X_A_train[1,] %>% plot.ts()
X_B_train[1,] %>% plot.ts()
X_A_train[1,] %>% plot()
X_B_train[1,] %>% plot()
library(tidyverse)
library(splines2)
library(pls)
source('functions.R')
# true functional coefficient
beta <- function(t){10*(t-1)^2 + 30*cos(4*pi*t^3)}
# domain for observations
domain <- c(0,1)
a <- domain[1]
b <- domain[2]
# number of measured spectral points for instrument A and B respectively
p1 <- 425
p2 <- 150
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
X_A_train[1,] %>% plot.ts()
X_B_train[1,] %>% plot.ts()
X_A_train[1,] %>% plot()
X_B_train[1,] %>% plot()
plsr_fit <- plsr(Y_train ~ X_A_train, validation = "CV")
# Choose number of componenets which minimize CV PRESS
k <- which.min(plsr_fit$validation$PRESS)
# Coefficients from plsr model
alpha <- (plsr_fit$coefficients[,,k])
# Coefficients closest to observavtion grid of spectra from instrument B
alpha_adj <- alpha[find_closest(grd_A,grd_B)]
alpha %>% plot()
# Coefficients closest to observavtion grid of spectra from instrument B
alpha_adj <- alpha[find_closest(grd_A,grd_B)]
# Predictions
pls_preds_A <- as.numeric(X_A_test%*%alpha)
pls_preds_B <- as.numeric(X_B_test%*%alpha_adj)
# Predictions
(pls_preds_A <- as.numeric(X_A_test%*%alpha))
# Degree = 3 for cubic B-splines
d <- 3
# M = number of basis functions - degree
# Should be chosen via cross-validation (or some criterion)
M <- 10
# Internal knots for basis functions
knots <- seq(a, b, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on observation grid
basis_mat <- bSpline(grd_A, knots = knots, degree = d, intercept = T)
# Number of components for fPLSR
# Should be chosen via cross-validation (or some criterion)
k <- 5
fplsr_fit <- fplsr(Y_train, X_A_train, basis_mat, ncomp = k)
# Predictions
fpls_preds_A <- pred_fplsr(X_A_test,fplsr_fit)
fpls_preds_B <- pred_fplsr(X_B_test,fplsr_fit)
# Degree = 3 for cubic B-splines
d_x <- 3
# M =  number of basis functions - minus degree
M_x <- 13
# Internal knots for basis functions
knots_x <- seq(a, b, length.out = M_x+1)[-c(1,M_x+1)]
x_basis_mat <- bSpline(grd_A, knots = knots_x, degree = d_x, intercept = T)
k <- 5
fplsr_fit_basis <- fplsr(Y_train, X_A_train, basis_mat, x_basis_mat, ncomp = k)
# Predictions
fpls_preds_A_basis <- pred_fplsr(X_A_test,fplsr_fit_basis)
fpls_preds_B_basis <- pred_fplsr(X_B_test,fplsr_fit_basis)
pmse(pls_preds_A,Y_test)
pmse(pls_preds_A,Y_test)
pmse(pls_preds_B,Y_test)
pmse(fpls_preds_A,Y_test)
pmse(fpls_preds_B,Y_test)
pmse(fpls_preds_A_basis,Y_test)
pmse(fpls_preds_B_basis,Y_test)
fplsr_fit$beta_fun(grd_A) %>% plot.ts()
fplsr_fit$beta_fun(grd_A) %>% plot()
