pA <- ncol(X)
grdA <- seq(0,1,length.out = pA)
# Misaligned observtion grid
pB <- 100
grdB <- seq(0,1,length.out = pB)
# Degree for cubic B-splines
d <- 3
# Number of internal knots - 1
M <- 50
# Internal knots for basis functions
knots <- seq(0, 1, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on original observation grid
basis_spectra <- bSpline(grdA, knots = knots, degree = d, intercept = T)
# Coefficients from basis expansion
A <- get_basis_coefs(X,basis_spectra)
# Spectral points matching original observation grid (instrument A)
X_A <- (A%*%t(predict(basis_spectra,grdA)))
# Spectral points on mislaigned grid (instrument B)
X_B <- (A%*%t(predict(basis_spectra,grdB)))
# Train/Test Split
set.seed(10)
train_ind <- sample(1:n,floor(.8*n))
X_A_train <- X_A[train_ind,]
X_B_train <- X_B[train_ind,]
X_A_test <- X_A[-train_ind,]
X_B_test <- X_B[-train_ind,]
y_train <- y[train_ind]
y_test <- y[-train_ind]
k <- 17
plsr_fit <- plsr(y_train~X_A_train, ncomp = k)
# Coefficients from plsr model
alpha <- (plsr_fit$coefficients[,,k])
# Coefficients closest to observavtion grid of spectra from instrument B
alpha_adj <- alpha[find_closest(grdA,grdB)]
# Predictions
pls_preds_A <- as.numeric(X_A_test%*%alpha)
pls_preds_B <- as.numeric(X_B_test%*%alpha_adj)
fplsr_fit <- fplsr(y_train, X_A_train, grd = grdA, M = 30, ncomp = k)
# Predictions
fpls_preds_A <- pred_fplsr(X_A_test, grdA, fplsr_fit)
fpls_preds_B <- pred_fplsr(X_B_test, grdB, fplsr_fit)
fplsr_fit_basis <- fplsr(y_train, X_A_train, grd = grdA, M = 30, M_x = 25, ncomp = k)
# Predictions
fpls_preds_A_basis <- pred_fplsr(X_A_test, grdA, fplsr_fit_basis)
fpls_preds_B_basis <- pred_fplsr(X_B_test, grdB, fplsr_fit_basis)
##### Results #####
pmse(pls_preds_A,y_test)
pmse(pls_preds_B,y_test)
pmse(fpls_preds_A,y_test)
pmse(fpls_preds_B,y_test)
pmse(fpls_preds_A_basis,y_test)
pmse(fpls_preds_B_basis,y_test)
plot(pls_preds_A,y_test)
abline(a=0,b=1)
plot(pls_preds_B,y_test)
plot(fpls_preds_B,y_test)
plot(fpls_preds_A,y_test)
abline(a=0,b=1)
abline(a=1,b=1)
abline(a=1,b=4)
abline(a=1,b=2)
abline(a=1,b=1)
abline(a=1,b=1.5)
abline(a=1,b=3)
abline(a=1,b=5)
contributors()
library(tidyverse)
library(splines2)
library(pls)
library(here)
setwd(here())
source('functions.R')
# true functional coefficient
beta <- function(t){10*(t-1)^2 + 30*cos(4*pi*t^3)}
# domain for observations
domain <- c(0,1)
a <- domain[1]
b <- domain[2]
# number of measured spectral points for instrument A and B respectively
p1 <- 425
p2 <- 150
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
plsr_fit <- plsr(Y_train ~ X_A_train, validation = "CV")
# Choose number of componenets which minimize CV PRESS
k <- which.min(plsr_fit$validation$PRESS)
# Coefficients from plsr model
alpha <- (plsr_fit$coefficients[,,k])
# Coefficients closest to observavtion grid of spectra from instrument B
alpha_adj <- alpha[find_closest(grd_A,grd_B)]
# Predictions
pls_preds_A <- as.numeric(X_A_test%*%alpha)
pls_preds_B <- as.numeric(X_B_test%*%alpha_adj)
pls_pred_A
pls_preds_A
# Number of components for fPLSR
fplsr_fit <- fplsr(Y_train, X_A_train, grd = grd_A, M = 10, ncomp = 5)
# Predictions
fpls_preds_A <- pred_fplsr(X_A_test,grd_A, fplsr_fit)
fpls_preds_B <- pred_fplsr(X_B_test,grd_B, fplsr_fit)
fplsr_fit_basis <- fplsr(Y_train, X_A_train, grd = grd_A, M = 10, M_x = 13, ncomp = 5)
# Predictions
fpls_preds_A_basis <- pred_fplsr(X_A_test,grd_A,fplsr_fit_basis)
fpls_preds_B_basis <- pred_fplsr(X_B_test,grd_B,fplsr_fit_basis)
# pmse(pls_preds_A,Y_test)
# pmse(pls_preds_A,Y_test)
# pmse(pls_preds_B,Y_test)
# pmse(pls_preds_A,Y_test)
# pmse(pls_preds_B,Y_test)
#
# pmse(pls_preds_A,Y_test)
# pmse(pls_preds_B,Y_test)
#
# pmse(fpls_preds_A,Y_test)
pmse(pls_preds_A,Y_test)
pmse(pls_preds_B,Y_test)
pmse(fpls_preds_A,Y_test)
pmse(fpls_preds_B,Y_test)
pmse(fpls_preds_A_basis,Y_test)
pmse(fpls_preds_B_basis,Y_test)
X_A_train[,1] %>% plot()
X_A_train[,1] %>% plot.ts()
X_A_train[1,] %>% plot.ts()
X_A_train[1,] %>% plot()
X_A_train[1,]
obs_spec <- X_A_train[1,]
obs_spec
obs_spec %>% plot()
X_B_train[1,] %>% plot()
obs_spec <- X_B_train[1,]
obs_spec %>% plot()
obs_spec
x_t <- c(1,3,7)
x_t %>% plot()
obs_spec %>% plot()
grd_B
grd_B[1:2]
obs_spec[1:2]
c_1 <- c(obs_spec[1],grd_B[1])
c_1 <- c(obs_spec[1],grd_B[1])
c_2 <- c(obs_spec[2],grd_B[2])
c_1
c_2
c_1
c_2
rise <- c(c_1[1],c_2[1])
rise <- c(c_1[1],c_2[1])
run <- c(c_1[2],c_2[2])
diff(rise)
diff(rise)/diff(run)
rise
diff(c(3,1))
diff(rise)/diff(run)
m <- diff(rise)/diff(run)
m
rise[1]
m*run[1]
run[1]
run[2]
m*run[2]
rise[2]
rise[2] - m*run[2]
b <- rise[2] - m*run[2]
m*run[2] + b
rise[2]
m*run[1] + b
rise[1]
obs_spec
grd_B
diff(obs_spec)
diff(obs_spec)/diff(grd_B)
m
ms <- diff(obs_spec)/diff(grd_B)
ms %>% length()
grd_B
grd_B %>% length()
grd_B[-1]
grd_B*ms
xs <- grd_B[-1]
xs*ms
ys <- obs_spec[-1]
ys - xs*ms
bs <- ys - xs*ms
ms*xs + bs
ys
line_fun <- function(gs){
ms*gs + bs
}
line_fun <- function(gs){
ms*gs + bs
}
line_fun(grd_B[4])
ms*gs+bs
ms*xs+bs
ms*xs+bs %>% plot()
ys %>% plot()
ms*xs+bs %>% plot()
ys
ms*xs+bs
yhats <- ms*xs+bs
ys
yhats
ys
yhats
ys == yhats
rund(ys,3) == round(yhats,3)
round(ys,3) == round(yhats,3)
round(ys,4) == round(yhats,4)
yhats
yhats %>% plot()
ys %>% plot()
obs_spec %>% plot()
diff
approxfun(obs_spec,grd_B)
approxfun(obs_spec,grd_B)(grd_B[3])
obs_spec[3]
approxfun(obs_spec,grd_B)(grd_B)
approxfun(obs_spec,grd_B)(grd_B) %>% plot()
approxfun(grd_B,obs_spec)
approxfun(grd_B,obs_spec)(grd_B)
approxfun(grd_B,obs_spec)(grd_B) %>% plot()
approxfun(grd_B,obs_spec)(grd_B) %>% plot.ts()
approxfun(grd_B,obs_spec)(grd_B) %>% plot()
approxfun(grd_B,obs_spec)(grd_B+.03) %>% plot()
approxfun(grd_B,obs_spec)(grd_B+.04) %>% plot()
approxfun
approxfun(grd_B,obs_spec)
approxfun(grd_B,obs_spec)(grd_A)
approxfun(grd_B,obs_spec)(grd_A) %>% plot()
approxfun(grd_B,obs_spec)(grd_A) %>% plot()
approxfun(grd_B,obs_spec)(grd_B) %>% plot()
approxfun(grd_B,obs_spec)(grd_A) %>% plot()
approxfun(grd_B,obs_spec)(grd_A)
A_spec <- X_A_train[1,]
approxfun(grd_B,obs_spec)(grd_A)
app_A_spec <- approxfun(grd_B,obs_spec)(grd_A)
A_spec
app_A_spec %>% plot()
A_spec %>% plot()
app_A_spec == A_spec
round(app_A_spec,4) == round(A_spec,4)
A_spec[23]
app_A_spec[23]
A_spec[50]
app_A_spec[50]
tibble(vals = c(app_A_spec, A_spec), grd = rep(grd_A,2), group = rep(c("App","Or"), each = length(A_spec)))
tb <- tibble(vals = c(app_A_spec, A_spec), grd = rep(grd_A,2), group = rep(c("App","Or"), each = length(A_spec)))
tb %>%
ggplot(aes(grd,vals, color = group))+
geom_point()
tb %>%
ggplot(aes(grd,vals, color = group))+
geom_point()+
theme_bw()
# domain for observations
domain <- c(0,1)
a <- domain[1]
b <- domain[2]
# number of measured spectral points for instrument A and B respectively
p1 <- 425
p2 <- 100
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
X_B_train[1,] %>% plot()
obs_spec <- X_B_train[1,]
A_spec <- X_A_train[1,]
app_A_spec <- approxfun(grd_B,obs_spec)(grd_A)
A_spec
tb <- tibble(vals = c(app_A_spec, A_spec), grd = rep(grd_A,2), group = rep(c("App","Or"), each = length(A_spec)))
tb %>%
ggplot(aes(grd,vals, color = group))+
geom_point()+
theme_bw()
# number of measured spectral points for instrument A and B respectively
p1 <- 700
p2 <- 50
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
X_B_train[1,] %>% plot()
obs_spec <- X_B_train[1,]
A_spec <- X_A_train[1,]
app_A_spec <- approxfun(grd_B,obs_spec)(grd_A)
tb <- tibble(vals = c(app_A_spec, A_spec), grd = rep(grd_A,2), group = rep(c("App","Or"), each = length(A_spec)))
tb %>%
ggplot(aes(grd,vals, color = group))+
geom_point()+
theme_bw()
# number of measured spectral points for instrument A and B respectively
p1 <- 500
p2 <- 50
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
X_B_train[1,] %>% plot()
obs_spec <- X_B_train[1,]
A_spec <- X_A_train[1,]
app_A_spec <- approxfun(grd_B,obs_spec)(grd_A)
tb <- tibble(vals = c(app_A_spec, A_spec), grd = rep(grd_A,2), group = rep(c("App","Or"), each = length(A_spec)))
tb %>%
ggplot(aes(grd,vals, color = group))+
geom_point()+
theme_bw()
obs_spec <- X_B_train[5,]
A_spec <- X_A_train[5,]
app_A_spec <- approxfun(grd_B,obs_spec)(grd_A)
tb <- tibble(vals = c(app_A_spec, A_spec), grd = rep(grd_A,2), group = rep(c("App","Or"), each = length(A_spec)))
tb %>%
ggplot(aes(grd,vals, color = group))+
geom_point()+
theme_bw()
plsr_fit <- plsr(Y_train ~ X_A_train, validation = "CV")
# true functional coefficient
beta <- function(t){10*(t-1)^2 + 30*cos(4*pi*t^3)}
# domain for observations
domain <- c(0,1)
a <- domain[1]
b <- domain[2]
# number of measured spectral points for instrument A and B respectively
p1 <- 500
p2 <- 50
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
obs_spec <- X_B_train[5,]
A_spec <- X_A_train[5,]
app_A_spec <- approxfun(grd_B,obs_spec)(grd_A)
tb <- tibble(vals = c(app_A_spec, A_spec), grd = rep(grd_A,2), group = rep(c("App","Or"), each = length(A_spec)))
tb %>%
ggplot(aes(grd,vals, color = group))+
geom_point()+
theme_bw()
# number of measured spectral points for instrument A and B respectively
p1 <- 500
p2 <- 250
# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)
# number of observations to generate (for both instruements)
n <- 500
set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)
# indices for training set
train_ind <- sample(1:n,floor(n*.8))
# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]
# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]
# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]
obs_spec <- X_B_train[5,]
A_spec <- X_A_train[5,]
app_A_spec <- approxfun(grd_B,obs_spec)(grd_A)
tb <- tibble(vals = c(app_A_spec, A_spec), grd = rep(grd_A,2), group = rep(c("App","Or"), each = length(A_spec)))
tb %>%
ggplot(aes(grd,vals, color = group))+
geom_point()+
theme_bw()
# Read in data
x_data <- read_csv("data/AOP_Crown.csv")
site_trait_data <- read_csv("data/site_trait_data.csv")
y_data <- drop_na(tibble(ID = site_trait_data$SampleSiteID, y = site_trait_data$d15N))
xy_data <- inner_join(y_data,x_data)
# Read in data
x_data <- read_csv("data/AOP_Crown.csv")
site_trait_data <- read_csv("data/site_trait_data.csv")
y_data <- drop_na(tibble(ID = site_trait_data$SampleSiteID, y = site_trait_data$d15N))
xy_data <- inner_join(y_data,x_data)
refl_data <- xy_data[,20:445]
neon_grd <- read_rds("data/neon_grd.RDS")
bad_bands <- c(1:8,192:205,284:327,417:ncol(refl_data))
good_grd <- neon_grd[-bad_bands]
# Reflectance data
X <- matrix(unname(unlist(refl_data[,-bad_bands])), nrow = nrow(refl_data))
# Response
y <- xy_data$y
# Number of observations
n <- nrow(X)
# Original observation grid (scaled to unit interval)
pA <- ncol(X)
grdA <- seq(0,1,length.out = pA)
# Misaligned observtion grid
pB <- 100
grdB <- seq(0,1,length.out = pB)
# Degree for cubic B-splines
d <- 3
# Number of internal knots - 1
M <- 50
# Internal knots for basis functions
knots <- seq(0, 1, length.out = M+1)[-c(1,M+1)]
# Matrix of basis functions evaluated on original observation grid
basis_spectra <- bSpline(grdA, knots = knots, degree = d, intercept = T)
# Coefficients from basis expansion
A <- get_basis_coefs(X,basis_spectra)
# Spectral points matching original observation grid (instrument A)
X_A <- (A%*%t(predict(basis_spectra,grdA)))
# Spectral points on mislaigned grid (instrument B)
X_B <- (A%*%t(predict(basis_spectra,grdB)))
# Train/Test Split
set.seed(10)
train_ind <- sample(1:n,floor(.8*n))
X_A_train <- X_A[train_ind,]
X_B_train <- X_B[train_ind,]
X_A_test <- X_A[-train_ind,]
X_B_test <- X_B[-train_ind,]
y_train <- y[train_ind]
y_test <- y[-train_ind]
# Read in data
x_data <- read_csv("data/AOP_Crown.csv")
site_trait_data <- read_csv("data/site_trait_data.csv")
y_data <- drop_na(tibble(ID = site_trait_data$SampleSiteID, y = site_trait_data$d15N))
xy_data <- inner_join(y_data,x_data)
refl_data <- xy_data[,20:445]
neon_grd <- read_rds("data/neon_grd.RDS")
bad_bands <- c(1:8,192:205,284:327,417:ncol(refl_data))
good_grd <- neon_grd[-bad_bands]
# Reflectance data
X <- matrix(unname(unlist(refl_data[,-bad_bands])), nrow = nrow(refl_data))
# Response
y <- xy_data$y
X
X[1,] %>% plot()
X[1,] %>% length()
2:4:6
seq(1:length(good_grd), by = 2)
seq(1,length(good_grd), by = 2)
down_sample <- seq(1,length(good_grd), by = 2)
X[1,down_sample]
X[1,]
pnorm(.5,.65,sqrt(.65*.35/20))
1-pnorm(.5,.65,sqrt(.65*.35/20))
pnorm(2.60)-pnorm(-1.73)
