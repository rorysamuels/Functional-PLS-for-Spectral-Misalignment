library(tidyverse)
library(splines2)
library(pls)
source('functions.R')

##### Data Generation #####

# true functional coefficient
beta <- function(t){10*(t-1)^2 + 30*cos(4*pi*t^3)}


# domain for observations
domain <- c(0,1)
a <- domain[1]
b <- domain[2]

# number of measured spectral points for instrument A and B respectively
p1 <- 425
p2 <- 150

# observation grid for instrument A and B respectively
grd_A <- seq(a,b,length.out = p1)
grd_B <- seq(a,b,length.out = p2)

# number of observations to generate (for both instruements)
n <- 500

set.seed(1)
dat <- generate_data(n,nknots = 20,snr = 5, beta_fun = beta, domain = domain, grd_A, grd_B)

# indices for training set
train_ind <- sample(1:n,floor(n*.8))

# train/test response
Y_train <- dat$Y[train_ind]
Y_test <- dat$Y[-train_ind]

# train/test instrument A
X_A_train <- dat$X_A[train_ind,]
X_A_test <- dat$X_A[-train_ind,]

# train/test instrument B
X_B_train <- dat$X_B[train_ind,]
X_B_test <- dat$X_B[-train_ind,]

















##### Functional Partial Least Squares without Basis Approx for Data #####


# Number of components for fPLSR
# Should be chosen via cross-validation (or some criterion)
k <- 5
fplsr_fit <- fplsr(Y_train,X_A_train,grd_A, M = 10, ncomp = k, M_x = 13)

pred_fplsr(X_A_test,grd_A,fplsr_fit)
pred_fplsr(X_B_test,grd_B,fplsr_fit)

# Predictions
fpls_preds_A_2 <- pred_fplsr(X_A_test,grd_A,fplsr_fit)
fpls_preds_B_2 <- pred_fplsr(X_B_test,grd_B,fplsr_fit)






pmse(Y_test,fpls_preds_B_2)






##### Functional Partial Least Squares without Basis Approx for Data #####



k <- 5
fplsr_fit_basis <- fplsr(Y_train, X_A_train, basis_mat, x_basis_mat, ncomp = k)


# Predictions
fpls_preds_A_basis_2 <- pred_fplsr(X_A_test,fplsr_fit_basis)
fpls_preds_B_basis_2 <- pred_fplsr(X_B_test,fplsr_fit_basis)














##### Prediction Results #####


pmse(fpls_preds_A,Y_test)
pmse(fpls_preds_B,Y_test)

pmse(fpls_preds_A_2,Y_test)
pmse(fpls_preds_B_2,Y_test)

pmse(fpls_preds_A_basis,Y_test)
pmse(fpls_preds_B_basis,Y_test)

















